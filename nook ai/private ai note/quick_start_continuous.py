#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å nook_engine –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "nook_engine"))

from nook_engine import NookEngine

def quick_start():
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
    
    print("üé§ Nook Engine - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫ —Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    engine = NookEngine(
        model_size="base.en",      # –ú–æ–¥–µ–ª—å Whisper
        continuous_mode=True,      # –í–∫–ª—é—á–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interruption_gap=1.0,      # 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏—è
        language="en"              # –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    if not engine.initialize():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    print("‚úÖ –î–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if engine.continuous_mode else '–í–´–ö–õ'}")
    print(f"‚è±Ô∏è  –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏—è: {engine.interruption_gap}—Å")
    
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    audio_file = "–≤–∞—à_—Ñ–∞–π–ª.wav"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –§–ê–ô–õ
    
    if not Path(audio_file).exists():
        print(f"‚ö†Ô∏è  –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        for file in Path(".").glob("*.wav"):
            print(f"   - {file.name}")
        print("\n–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
        audio_file = "mic_test.wav"
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
    print(f"\nüéµ –û–±—Ä–∞–±–æ—Ç–∫–∞: {audio_file}")
    result = engine.diarize_audio(audio_file)
    
    if result:
        print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        segments = result.get('segments', [])
        speakers = result.get('speakers', [])
        
        print(f"üë• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {len(speakers)}")
        print(f"üìù –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}")
        print(f"‚è±Ô∏è  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('total_duration', 0):.1f}—Å")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        print("\nüìã –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:")
        print("-" * 40)
        for i, segment in enumerate(segments):
            speaker = segment['speaker']
            text = segment['text']
            start = segment['start']
            end = segment['end']
            print(f"\n{i+1}. {speaker} ({start:.1f}s - {end:.1f}s):")
            print(f"   {text}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_file = "continuous_result.json"
        engine.save_result(result, output_file, "json")
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
    engine.cleanup()
    print("\nüßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

if __name__ == "__main__":
    quick_start()
