#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ Nook AI –¥–ª—è macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import os
import signal
import time
import json

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ nook_engine
engine_path = os.path.join(os.path.dirname(__file__), '..', 'nook ai', 'private ai note')
sys.path.insert(0, engine_path)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—á–∏—Å—Ç–∫–∞...")
    if 'engine' in globals():
        engine.cleanup()
    print("‚úÖ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(0)

def create_communication_files(temp_dir):
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–≤—è–∑–∏"""
    files = [
        os.path.join(temp_dir, "stream.jsonl")
    ]
    
    for file_path in files:
        if not os.path.exists(file_path):
            if file_path.endswith('.jsonl'):
                with open(file_path, 'w') as f:
                    pass  # –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
    
    # –ù–ï —Å–æ–∑–¥–∞–µ–º command.json –∏ result.json - –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–≤–∏–∂–∫–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    print("‚ÑπÔ∏è  –§–∞–π–ª—ã command.json –∏ result.json –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–≤–∏–∂–∫–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ Nook AI –¥–ª—è macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 50)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        from nook_engine import create_macos_engine
        
        # –°–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞...")
        temp_dir = os.path.expanduser("~/Documents/nook_engine")
        
        # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã —Å–≤—è–∑–∏
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–≤—è–∑–∏...")
        create_communication_files(temp_dir)
        
        engine = create_macos_engine(
            model_size="small.en",    # excellent quality, reasonable size (~244MB)
            continuous_mode=True,
            interruption_gap=0.45,     # optimized for small.en
            temp_dir=temp_dir
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞...")
        if not engine.initialize():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–∞")
            return
        
        print("‚úÖ –î–≤–∏–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print("üîÑ Continuous mode: ON (interruption gap: 0.45s)")
        print("üñ•Ô∏è macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   –°—Ç–∞—Ç—É—Å: {engine.status_file}")
        print(f"   –ö–æ–º–∞–Ω–¥—ã: {engine.command_file}")
        print(f"   –ü–æ—Ç–æ–∫: {engine.stream_file}")
        
        print("\nüîÑ –î–≤–∏–∂–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            try:
                status = engine.get_status()
                if 'error' in status:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–≤–∏–∂–∫–∞: {status['error']}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if 'engine' in locals():
            print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            try:
                engine.cleanup()
                print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

if __name__ == "__main__":
    main()
